{"version":3,"file":"index.js","mappings":"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","sources":["webpack://d3/webpack/bootstrap","webpack://d3/webpack/runtime/define property getters","webpack://d3/webpack/runtime/hasOwnProperty shorthand","webpack://d3/webpack/runtime/make namespace object","webpack://d3/external window \"d3\"","webpack://d3/./node_modules/d3-geo-projection/src/math.js","webpack://d3/./node_modules/d3-geo-projection/src/airy.js","webpack://d3/./node_modules/d3-geo-projection/src/aitoff.js","webpack://d3/./node_modules/d3-geo-projection/src/armadillo.js","webpack://d3/./node_modules/d3-geo-projection/src/august.js","webpack://d3/./node_modules/d3-geo-projection/src/baker.js","webpack://d3/./node_modules/d3-geo-projection/src/berghaus.js","webpack://d3/./node_modules/d3-geo-projection/src/hammer.js","webpack://d3/./node_modules/d3-geo-projection/src/newton.js","webpack://d3/./node_modules/d3-geo-projection/src/bertin.js","webpack://d3/./node_modules/d3-geo-projection/src/mollweide.js","webpack://d3/./node_modules/d3-geo-projection/src/boggs.js","webpack://d3/./node_modules/d3-geo-projection/src/parallel1.js","webpack://d3/./node_modules/d3-geo-projection/src/sinusoidal.js","webpack://d3/./node_modules/d3-geo-projection/src/bonne.js","webpack://d3/./node_modules/d3-geo-projection/src/bottomley.js","webpack://d3/./node_modules/d3-geo-projection/src/bromley.js","webpack://d3/./node_modules/d3-geo-projection/src/chamberlin.js","webpack://d3/./node_modules/d3-geo-projection/src/collignon.js","webpack://d3/./node_modules/d3-geo-projection/src/craig.js","webpack://d3/./node_modules/d3-geo-projection/src/craster.js","webpack://d3/./node_modules/d3-geo-projection/src/cylindricalEqualArea.js","webpack://d3/./node_modules/d3-geo-projection/src/cylindricalStereographic.js","webpack://d3/./node_modules/d3-geo-projection/src/eckert1.js","webpack://d3/./node_modules/d3-geo-projection/src/eckert2.js","webpack://d3/./node_modules/d3-geo-projection/src/eckert3.js","webpack://d3/./node_modules/d3-geo-projection/src/eckert4.js","webpack://d3/./node_modules/d3-geo-projection/src/eckert5.js","webpack://d3/./node_modules/d3-geo-projection/src/eckert6.js","webpack://d3/./node_modules/d3-geo-projection/src/eisenlohr.js","webpack://d3/./node_modules/d3-geo-projection/src/fahey.js","webpack://d3/./node_modules/d3-geo-projection/src/foucaut.js","webpack://d3/./node_modules/d3-geo-projection/src/foucautSinusoidal.js","webpack://d3/./node_modules/d3-geo-projection/src/gilbert.js","webpack://d3/./node_modules/d3-geo-projection/src/gingery.js","webpack://d3/./node_modules/d3-geo-projection/src/ginzburgPolyconic.js","webpack://d3/./node_modules/d3-geo-projection/src/ginzburg4.js","webpack://d3/./node_modules/d3-geo-projection/src/ginzburg5.js","webpack://d3/./node_modules/d3-geo-projection/src/ginzburg6.js","webpack://d3/./node_modules/d3-geo-projection/src/ginzburg8.js","webpack://d3/./node_modules/d3-geo-projection/src/ginzburg9.js","webpack://d3/./node_modules/d3-geo-projection/src/square.js","webpack://d3/./node_modules/d3-geo-projection/src/gringorten.js","webpack://d3/./node_modules/d3-geo-projection/src/elliptic.js","webpack://d3/./node_modules/d3-geo-projection/src/guyou.js","webpack://d3/./node_modules/d3-geo-projection/src/hammerRetroazimuthal.js","webpack://d3/./node_modules/d3-geo-projection/src/healpix.js","webpack://d3/./node_modules/d3-geo-projection/src/hill.js","webpack://d3/./node_modules/d3-geo-projection/src/sinuMollweide.js","webpack://d3/./node_modules/d3-geo-projection/src/homolosine.js","webpack://d3/./node_modules/d3-geo-projection/src/hufnagel.js","webpack://d3/./node_modules/d3-geo-projection/src/integrate.js","webpack://d3/./node_modules/d3-geo-projection/src/hyperelliptical.js","webpack://d3/./node_modules/d3-geo-projection/src/interrupted/index.js","webpack://d3/./node_modules/d3-geo-projection/src/interrupted/boggs.js","webpack://d3/./node_modules/d3-geo-projection/src/interrupted/homolosine.js","webpack://d3/./node_modules/d3-geo-projection/src/interrupted/mollweide.js","webpack://d3/./node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js","webpack://d3/./node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js","webpack://d3/./node_modules/d3-geo-projection/src/interrupted/sinusoidal.js","webpack://d3/./node_modules/d3-geo-projection/src/kavrayskiy7.js","webpack://d3/./node_modules/d3-geo-projection/src/lagrange.js","webpack://d3/./node_modules/d3-geo-projection/src/larrivee.js","webpack://d3/./node_modules/d3-geo-projection/src/laskowski.js","webpack://d3/./node_modules/d3-geo-projection/src/littrow.js","webpack://d3/./node_modules/d3-geo-projection/src/loximuthal.js","webpack://d3/./node_modules/d3-geo-projection/src/miller.js","webpack://d3/./node_modules/d3-geo-projection/src/modifiedStereographic.js","webpack://d3/./node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","webpack://d3/./node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","webpack://d3/./node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","webpack://d3/./node_modules/d3-geo-projection/src/naturalEarth2.js","webpack://d3/./node_modules/d3-geo-projection/src/nellHammer.js","webpack://d3/./node_modules/d3-geo-projection/src/interrupted/quarticAuthalic.js","webpack://d3/./node_modules/d3-geo-projection/src/nicolosi.js","webpack://d3/./node_modules/d3-geo-projection/src/patterson.js","webpack://d3/./node_modules/d3-geo-projection/src/polyconic.js","webpack://d3/./node_modules/d3-geo-projection/src/polyhedral/matrix.js","webpack://d3/./node_modules/d3-geo-projection/src/polyhedral/index.js","webpack://d3/./node_modules/d3-geo-projection/src/polyhedral/octahedron.js","webpack://d3/./node_modules/d3-geo-projection/src/polyhedral/butterfly.js","webpack://d3/./node_modules/d3-geo-projection/src/polyhedral/collignon.js","webpack://d3/./node_modules/d3-geo-projection/src/polyhedral/waterman.js","webpack://d3/./node_modules/d3-geo-projection/src/noop.js","webpack://d3/./node_modules/d3-geo-projection/src/project/index.js","webpack://d3/./node_modules/d3-geo-projection/src/project/clockwise.js","webpack://d3/./node_modules/d3-geo-projection/src/project/contains.js","webpack://d3/./node_modules/d3-geo-projection/src/quincuncial/index.js","webpack://d3/./node_modules/d3-geo-projection/src/quincuncial/gringorten.js","webpack://d3/./node_modules/d3-geo-projection/src/quincuncial/peirce.js","webpack://d3/./node_modules/d3-geo-projection/src/quantize.js","webpack://d3/./node_modules/d3-geo-projection/src/rectangularPolyconic.js","webpack://d3/./node_modules/d3-geo-projection/src/robinson.js","webpack://d3/./node_modules/d3-geo-projection/src/satellite.js","webpack://d3/./node_modules/d3-geo-projection/src/stitch.js","webpack://d3/./node_modules/d3-geo-projection/src/times.js","webpack://d3/./node_modules/d3-geo-projection/src/twoPoint.js","webpack://d3/./node_modules/d3-geo-projection/src/twoPointAzimuthal.js","webpack://d3/./node_modules/d3-geo-projection/src/twoPointEquidistant.js","webpack://d3/./node_modules/d3-geo-projection/src/vanDerGrinten.js","webpack://d3/./node_modules/d3-geo-projection/src/vanDerGrinten2.js","webpack://d3/./node_modules/d3-geo-projection/src/vanDerGrinten3.js","webpack://d3/./node_modules/d3-geo-projection/src/vanDerGrinten4.js","webpack://d3/./node_modules/d3-geo-projection/src/wagner.js","webpack://d3/./node_modules/d3-geo-projection/src/wagner4.js","webpack://d3/./index.js","webpack://d3/./node_modules/d3-geo-projection/src/wagner6.js","webpack://d3/./node_modules/d3-geo-projection/src/wiechel.js","webpack://d3/./node_modules/d3-geo-projection/src/winkel3.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"d3\"];","export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sin = Math.sin;\nexport var tan = Math.tan;\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\n\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\n\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\n\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\n\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan} from \"./math.js\";\n\nexport function airyRaw(beta) {\n  var tanBeta_2 = tan(beta / 2),\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\n\n  function forward(x, y) {\n    var cosx = cos(x),\n        cosy = cos(y),\n        siny = sin(y),\n        cosz = cosy * cosx,\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\n    return [k * cosy * sin(x), k * siny];\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y),\n        z = -beta / 2,\n        i = 50, delta;\n    if (!r) return [0, 0];\n    do {\n      var z_2 = z / 2,\n          cosz_2 = cos(z_2),\n          sinz_2 = sin(z_2),\n          tanz_2 = sinz_2 / cosz_2,\n          lnsecz_2 = -log(abs(cosz_2));\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2)) * (cosz_2 < 0 ? 0.7 : 1);\n    } while (abs(delta) > epsilon && --i > 0);\n    var sinz = sin(z);\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var beta = halfPi,\n      m = projectionMutator(airyRaw),\n      p = m(beta);\n\n  p.radius = function(_) {\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\n  };\n\n  return p\n      .scale(179.976)\n      .clipAngle(147);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math.js\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \"./math.js\";\n\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [\n      (1 + cosPhi) * sin(lambda),\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      if (abs(dPhi) > 2) dPhi /= 2;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream)),\n        precision = p.precision();\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90)\n        sphereStream.point(lambda, sPhi0 * 90);\n      if (phi0) while (sPhi0 * (lambda -= 3 * sPhi0 * precision) >= -180) {\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(218.695)\n      .center([0, 28.0974]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math.js\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math.js\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n","import {geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan} from \"./math.js\";\n\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n    if (abs(lambda) > halfPi) { // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          alpha = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n      theta = theta0 + asin(pi / r * sin(alpha)) - alpha;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y);\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotAlpha = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotAlpha + s * sqrt(cotAlpha * cotAlpha - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function(_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(87.8076)\n      .center([0, 17.1875])\n      .clipAngle(180 - 1e-3);\n}\n","import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math.js\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n","import {abs, epsilon, epsilon2} from \"./math.js\";\n\n// Approximate Newton-Raphson\n// Solve f(x) = y, start from x\nexport function solve(f, y, x) {\n  var steps = 100, delta, f0, f1;\n  x = x === undefined ? 0 : +x;\n  y = +y;\n  do {\n    f0 = f(x);\n    f1 = f(x + epsilon);\n    if (f0 === f1) f1 = f0 + epsilon;\n    x -= delta = (-1 * epsilon * (f0 - y)) / (f0 - f1);\n  } while (steps-- > 0 && abs(delta) > epsilon);\n  return steps < 0 ? NaN : x;\n}\n\n// Approximate Newton-Raphson in 2D\n// Solve f(a,b) = [x,y]\nexport function solve2d(f, MAX_ITERATIONS, eps) {\n  if (MAX_ITERATIONS === undefined) MAX_ITERATIONS = 40;\n  if (eps === undefined) eps = epsilon2;\n  return function(x, y, a, b) {\n    var err2, da, db;\n    a = a === undefined ? 0 : +a;\n    b = b === undefined ? 0 : +b;\n    for (var i = 0; i < MAX_ITERATIONS; i++) {\n      var p = f(a, b),\n        // diffs\n        tx = p[0] - x,\n        ty = p[1] - y;\n      if (abs(tx) < eps && abs(ty) < eps) break; // we're there!\n\n      // backtrack if we overshot\n      var h = tx * tx + ty * ty;\n      if (h > err2) {\n        a -= da /= 2;\n        b -= db /= 2;\n        continue;\n      }\n      err2 = h;\n\n      // partial derivatives\n      var ea = (a > 0 ? -1 : 1) * eps,\n        eb = (b > 0 ? -1 : 1) * eps,\n        pa = f(a + ea, b),\n        pb = f(a, b + eb),\n        dxa = (pa[0] - p[0]) / ea,\n        dya = (pa[1] - p[1]) / ea,\n        dxb = (pb[0] - p[0]) / eb,\n        dyb = (pb[1] - p[1]) / eb,\n        // determinant\n        D = dyb * dxa - dya * dxb,\n        // newton step — or half-step for small D\n        l = (abs(D) < 0.5 ? 0.5 : 1) / D;\n      da = (ty * dxb - tx * dyb) * l;\n      db = (tx * dya - ty * dxa) * l;\n      a += da;\n      b += db;\n      if (abs(da) < eps && abs(db) < eps) break; // we're crawling\n    }\n    return [a, b];\n  };\n}","import {geoProjection as projection} from \"d3-geo\";\nimport {hammerRaw} from \"./hammer.js\";\nimport {cos, pi, sin} from \"./math.js\";\nimport {solve2d} from \"./newton.js\";\n\n// Bertin 1953 as a modified Briesemeister\n// https://bl.ocks.org/Fil/5b9ee9636dfb6ffa53443c9006beb642\nexport function bertin1953Raw() {\n  var hammer = hammerRaw(1.68, 2),\n      fu = 1.4, k = 12;\n\n  function forward(lambda, phi) {\n\n    if (lambda + phi < -fu) {\n      var u = (lambda - phi + 1.6) * (lambda + phi + fu) / 8;\n      lambda += u;\n      phi -= 0.8 * u * sin(phi + pi / 2);\n    }\n\n    var r = hammer(lambda, phi);\n\n    var d = (1 - cos(lambda * phi)) / k;\n\n    if (r[1] < 0) {\n      r[0] *= 1 + d;\n    }\n    if (r[1] > 0) {\n      r[1] *= 1 + d / 1.5 * r[0] * r[0];\n    }\n\n    return r;\n  }\n  \n  forward.invert = solve2d(forward);\n  return forward;\n}\n\nexport default function() {\n  // this projection should not be rotated\n  return projection(bertin1953Raw())\n    .rotate([-16.5, -42])\n    .scale(176.57)\n    .center([7.93, 0.09]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math.js\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideBromleyTheta} from \"./mollweide.js\";\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math.js\";\n\nvar k = 2.00276,\n    w = 1.11072;\n\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function(x, y) {\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function() {\n  return projection(boggsRaw)\n      .scale(160.857);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {degrees, radians} from \"./math.js\";\n\nexport default function(projectAt) {\n  var phi0 = 0,\n      m = projectionMutator(projectAt),\n      p = m(phi0);\n\n  p.parallel = function(_) {\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos} from \"./math.js\";\n\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function(x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function() {\n  return projection(sinusoidalRaw)\n      .scale(152.63);\n}\n","import parallel1 from \"./parallel1.js\";\nimport {atan2, cos, sin, sqrt, tan} from \"./math.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\n\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(bonneRaw)\n      .scale(123.082)\n      .center([0, 26.1441])\n      .parallel(45);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {atan2, cos, halfPi, sin, sqrt} from \"./math.js\";\n\nexport function bottomleyRaw(sinPsi) {\n\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function(x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function(_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi} from \"./math.js\";\nimport {mollweideBromleyRaw} from \"./mollweide.js\";\n\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\n\nexport default function() {\n  return projection(bromleyRaw)\n      .scale(152.63);\n}\n","import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \"./math.js\";\nimport {solve2d} from \"./newton.js\";\n\n// Azimuthal distance.\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda), r;\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n}\n\n// Angle opposite a, and contained between sides of lengths b and c.\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n// Normalize longitude.\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\n  ];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n\n  var mean = [\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\n  ];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3), i;\n\n    // Compute distance and azimuth from control points.\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    }\n\n    // Arithmetic mean of interception points.\n    var point = mean.slice();\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\n      .scale(380)\n      .center([22.5, 2]);\n}\n\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\n  var c = centroid({type: \"MultiPoint\", coordinates: [p0, p1, p2]}),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      f = chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)));\n  f.invert = solve2d(f);\n  var p = projection(f).rotate(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, pi, sin, sqrt, sqrtPi} from \"./math.js\";\n\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function(x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function() {\n  return projection(collignonRaw)\n      .scale(95.6464)\n      .center([0, 30]);\n}\n","import {asin, atan2, cos, sin, sqrt, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function(x, y) {\n    if (x) y *= sin(x) / x;\n    var cosLambda = cos(x);\n    return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];\n  } : function(x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(craigRaw)\n      .scale(249.828)\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt, sqrtPi} from \"./math.js\";\n\nvar sqrt3 = sqrt(3);\n\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function(x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function() {\n  return projection(crasterRaw)\n      .scale(156.19);\n}\n","import {asin, cos, sin} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalEqualAreaRaw)\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}\n","import {atan, cos, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalStereographicRaw)\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, pi, sqrt} from \"./math.js\";\n\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [\n    alpha * lambda * (1 - abs(phi) / pi),\n    alpha * phi\n  ];\n}\n\neckert1Raw.invert = function(x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [\n    x / (alpha * (1 - abs(phi) / pi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert1Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, pi, sign, sin, sqrt} from \"./math.js\";\n\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [\n    2 / sqrt(6 * pi) * lambda * alpha,\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\n  ];\n}\n\neckert2Raw.invert = function(x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [\n    x * sqrt(6 * pi) / (2 * alpha),\n    sign(y) * asin((4 - alpha * alpha) / 3)\n  ];\n};\n\nexport default function() {\n  return projection(eckert2Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math.js\";\n\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [\n    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),\n    4 / k * phi\n  ];\n}\n\neckert3Raw.invert = function(x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [\n    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),\n    y * k / 2\n  ];\n};\n\nexport default function() {\n  return projection(eckert3Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n  return [\n    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),\n    2 * sqrt(pi / (4 + pi)) * sin(phi)\n  ];\n}\n\neckert4Raw.invert = function(x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [\n    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),\n    asin((k + A * (c + 2)) / (2 + halfPi))\n  ];\n};\n\nexport default function() {\n  return projection(eckert4Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos, pi, sqrt} from \"./math.js\";\n\nexport function eckert5Raw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / sqrt(2 + pi),\n    2 * phi / sqrt(2 + pi)\n  ];\n}\n\neckert5Raw.invert = function(x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [\n    k * x / (1 + cos(phi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert5Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august.js\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math.js\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, radians, sqrt, tan} from \"./math.js\";\n\nvar faheyK = cos(35 * radians);\n\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function(x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function() {\n  return projection(faheyRaw)\n      .scale(137.152);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, sqrtPi, tan} from \"./math.js\";\n\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2, cosk = cos(k);\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function(x, y) {\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function() {\n  return projection(foucautRaw)\n      .scale(135.264);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {cos, halfPi, pi, sin, sqrt} from \"./math.js\";\nimport {solve} from \"./newton.js\";\n\nexport function foucautSinusoidalRaw(alpha) {\n  var beta = 1 - alpha,\n      equatorial = raw(pi, 0)[0] - raw(-pi, 0)[0],\n      polar = raw(0, halfPi)[1] - raw(0, -halfPi)[1],\n      ratio = sqrt(2 * polar / equatorial);\n\n  function raw(lambda, phi) {\n    var cosphi = cos(phi),\n        sinphi = sin(phi);\n    return [\n      cosphi / (beta + alpha * cosphi) * lambda,\n      beta * phi + alpha * sinphi\n    ];\n  }\n\n  function forward(lambda, phi) {\n    var p = raw(lambda, phi);\n    return [p[0] * ratio, p[1] / ratio];\n  }\n\n  function forwardMeridian(phi) {\n    return forward(0, phi)[1];\n  }\n\n  forward.invert = function(x, y) {\n    var phi = solve(forwardMeridian, y),\n        lambda = x / ratio * (alpha + beta / cos(phi));\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var alpha = 0.5,\n      m = projectionMutator(foucautSinusoidalRaw),\n      p = m(alpha);\n\n  p.alpha = function(_) {\n    return arguments.length ? m(alpha = +_) : alpha;\n  };\n\n  return p\n      .scale(168.725);\n}\n","import {geoEquirectangular, geoOrthographic} from \"d3-geo\";\nimport {asin, atan, degrees, radians, sin, tan} from \"./math.js\";\n\nfunction gilbertForward(point) {\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\n}\n\nfunction gilbertInvert(point) {\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\n}\n\nexport default function(projectionType) {\n  if (projectionType == null) projectionType = geoOrthographic;\n  var projection = projectionType(),\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\n\n  function gilbert(point) {\n    return projection(gilbertForward(point));\n  }\n\n  if (projection.invert) gilbert.invert = function(point) {\n    return gilbertInvert(projection.invert(point));\n  };\n\n  gilbert.stream = function(stream) {\n    var s1 = projection.stream(stream), s0 = equirectangular.stream({\n      point: function(lambda, phi) { s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees); },\n      lineStart: function() { s1.lineStart(); },\n      lineEnd: function() { s1.lineEnd(); },\n      polygonStart: function() { s1.polygonStart(); },\n      polygonEnd: function() { s1.polygonEnd(); }\n    });\n    s0.sphere = s1.sphere;\n    return s0;\n  };\n\n  function property(name) {\n    gilbert[name] = function() {\n      return arguments.length ? (projection[name].apply(projection, arguments), gilbert) : projection[name]();\n    };\n  }\n\n  gilbert.rotate = function(_) {\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\n  };\n\n  gilbert.center = function(_) {\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\n  };\n\n  property(\"angle\");\n  property(\"clipAngle\");\n  property(\"clipExtent\");\n  property(\"fitExtent\");\n  property(\"fitHeight\");\n  property(\"fitSize\");\n  property(\"fitWidth\");\n  property(\"scale\");\n  property(\"translate\");\n  property(\"precision\");\n\n  return gilbert\n      .scale(249.5);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math.js\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n","import {abs, asin, cos, epsilon, pi, sin, sqrt} from \"./math.js\";\n\nexport default function(a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda, deltaPhi, i = 50;\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\n\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\n\nexport default function() {\n  return projection(ginzburg4Raw)\n      .scale(149.995);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\n\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);\n\nexport default function() {\n  return projection(ginzburg5Raw)\n      .scale(153.93);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\nimport {pi} from \"./math.js\";\n\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\n\nexport default function() {\n  return projection(ginzburg6Raw)\n      .scale(130.945);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math.js\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\n\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);\n\nexport default function() {\n  return projection(ginzburg9Raw)\n      .scale(131.087);\n}\n","import {halfPi, pi} from \"./math.js\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function(x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;\n    else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n\n  return projectSquare;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math.js\";\nimport squareRaw from \"./square.js\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n","import {abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh} from \"./math.js\";\n\n// Returns [sn, cn, dn](u + iv|m).\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [\n      [0, b[0] / b[1]],\n      [1 / b[1], 0],\n      [b[2] / b[1], 0]\n    ];\n  }\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [\n    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],\n    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],\n    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]\n  ];\n}\n\n// Returns [sn, cn, dn, ph](u|m).\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [\n      t - ai * b,\n      b + ai * t,\n      1 - m * t * t / 2,\n      u - ai\n    ];\n  }\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [\n      t + ai * (twon - u) / (b * b),\n      phi - ai * t * phi * (twon - u),\n      phi + ai * t * phi * (twon + u),\n      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b\n    ];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n}\n\n// Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [\n      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),\n      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)\n    ];\n  }\n  return [\n    0,\n    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)\n  ];\n}\n\n// Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n  return phi / (pow(2, i) * a);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic.js\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math.js\";\nimport squareRaw from \"./square.js\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n","import {geoProjectionMutator as projectionMutator, geoCircle} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin} from \"./math.js\";\n\nexport function hammerRetroazimuthalRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      rotate = hammerRetroazimuthalRotation(phi0);\n\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\n\n  function forward(lambda, phi) {\n    var p = rotate(lambda, phi);\n    lambda = p[0], phi = p[1];\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        cosLambda = cos(lambda),\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\n        sinz = sin(z),\n        K = abs(sinz) > epsilon ? z / sinz : 1;\n    return [\n      K * cosPhi0 * sin(lambda),\n      (abs(lambda) > halfPi ? K : -K) // rotate for back hemisphere\n        * (sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + y * y),\n        sinz = -sin(rho),\n        cosz = cos(rho),\n        a = rho * cosz,\n        b = -y * sinz,\n        c = rho * sinPhi0,\n        d = sqrt(a * a + b * b - c * c),\n        phi = atan2(a * c + b * d, b * c - a * d),\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\n    return rotate.invert(lambda, phi);\n  };\n\n  return forward;\n}\n\n// Latitudinal rotation by phi0.\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\nfunction hammerRetroazimuthalRotation(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n\n  return function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi);\n    return [\n      atan2(y, x * cosPhi0 - z * sinPhi0),\n      asin(z * cosPhi0 + x * sinPhi0)\n    ];\n  };\n}\n\nexport default function() {\n  var phi0 = 0,\n      m = projectionMutator(hammerRetroazimuthalRaw),\n      p = m(phi0),\n      rotate_ = p.rotate,\n      stream_ = p.stream,\n      circle = geoCircle();\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    var r = p.rotate();\n    return m(phi0 = _ * radians).rotate(r);\n  };\n\n  // Temporary hack; see hammerRetroazimuthalRotation.\n  p.rotate = function(_) {\n    if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\n    circle.center([-_[0], -_[1]]);\n    return p;\n  };\n\n  p.stream = function(stream) {\n    stream = stream_(stream);\n    stream.sphere = function() {\n      stream.polygonStart();\n      var epsilon = 1e-2,\n          ring = circle.radius(90 - epsilon)().coordinates[0],\n          n = ring.length - 1,\n          i = -1,\n          p;\n      stream.lineStart();\n      while (++i < n) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      ring = circle.radius(90 + epsilon)().coordinates[0];\n      n = ring.length - 1;\n      stream.lineStart();\n      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      stream.polygonEnd();\n    };\n    return stream;\n  };\n\n  return p\n      .scale(79.4187)\n      .parallel(45)\n      .clipAngle(180 - 1e-3);\n}\n","import {range} from \"d3-array\";\nimport {geoStream, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {collignonRaw} from \"./collignon.js\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea.js\";\nimport {abs, asin, degrees, epsilon, floor, max, min, pi, radians, sqrtPi, tau} from \"./math.js\";\n\nvar K = 3,\n    healpixParallel = asin(1 - 1 / K) * degrees,\n    healpixLambert = cylindricalEqualAreaRaw(0);\n\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + (dy1 * dy1 * 4) / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function(x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphereTop(x, i) {\n  return [x, i & 1 ? 90 - epsilon : healpixParallel];\n}\n\nfunction sphereBottom(x, i) {\n  return [x, i & 1 ? -90 + epsilon : -healpixParallel];\n}\n\nfunction sphereNudge(d) {\n  return [d[0] * (1 - epsilon), d[1]];\n}\n\nfunction sphere(step) {\n  var c = [].concat(\n    range(-180, 180 + step / 2, step).map(sphereTop),\n    range(180, -180 - step / 2, -step).map(sphereBottom)\n  );\n  return {\n    type: \"Polygon\",\n    coordinates: [step === 180 ? c.map(sphereNudge) : c]\n  };\n}\n\nexport default function() {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function(_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere(180 / H), sphereStream); };\n    return rotateStream;\n  };\n\n  return p\n      .scale(239.75);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n    if (t && t < 2) {\n      var theta = halfPi - phi, i = 25, delta;\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n    return [\n      rho * sin(omega),\n      rho0 - rho * cos(omega)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [\n      asin(x / sqrt(rho2)) * pi / Bt_Bt1,\n      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function(_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p\n      .scale(167.774)\n      .center([0, 18.67]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideRaw} from \"./mollweide.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\n\nexport var sinuMollweidePhi = 0.7109889596207567;\n\nexport var sinuMollweideY = 0.0528035274542;\n\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function(x, y) {\n  return y > -sinuMollweidePhi\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(sinuMollweideRaw)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs} from \"./math.js\";\nimport {mollweideRaw} from \"./mollweide.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\nimport {sinuMollweidePhi, sinuMollweideY} from \"./sinuMollweide.js\";\n\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function(x, y) {\n  return abs(y) > sinuMollweidePhi\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(homolosineRaw)\n      .scale(152.63);\n}\n","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, degrees, pi, radians, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\n\nexport function hufnagelRaw(a, b, psiMax, ratio) {\n  var k = sqrt(\n      (4 * pi) /\n        (2 * psiMax +\n          (1 + a - b / 2) * sin(2 * psiMax) +\n          ((a + b) / 2) * sin(4 * psiMax) +\n          (b / 2) * sin(6 * psiMax))\n    ),\n    c = sqrt(\n      ratio *\n        sin(psiMax) *\n        sqrt((1 + a * cos(2 * psiMax) + b * cos(4 * psiMax)) / (1 + a + b))\n    ),\n    M = psiMax * mapping(1);\n\n  function radius(psi) {\n    return sqrt(1 + a * cos(2 * psi) + b * cos(4 * psi));\n  }\n\n  function mapping(t) {\n    var psi = t * psiMax;\n    return (\n      (2 * psi +\n        (1 + a - b / 2) * sin(2 * psi) +\n        ((a + b) / 2) * sin(4 * psi) +\n        (b / 2) * sin(6 * psi)) /\n      psiMax\n    );\n  }\n\n  function inversemapping(psi) {\n    return radius(psi) * sin(psi);\n  }\n\n  var forward = function(lambda, phi) {\n    var psi = psiMax * solve(mapping, (M * sin(phi)) / psiMax, phi / pi);\n    if (isNaN(psi)) psi = psiMax * sign(phi);\n    var kr = k * radius(psi);\n    return [((kr * c * lambda) / pi) * cos(psi), (kr / c) * sin(psi)];\n  };\n\n  forward.invert = function(x, y) {\n    var psi = solve(inversemapping, (y * c) / k);\n    return [\n      (x * pi) / (cos(psi) * k * c * radius(psi)),\n      asin((psiMax * mapping(psi / psiMax)) / M)\n    ];\n  };\n\n  if (psiMax === 0) {\n    k = sqrt(ratio / pi);\n    forward = function(lambda, phi) {\n      return [lambda * k, sin(phi) / k];\n    };\n    forward.invert = function(x, y) {\n      return [x / k, asin(y * k)];\n    };\n  }\n\n  return forward;\n}\n\nexport default function() {\n  var a = 1,\n    b = 0,\n    psiMax = 45 * radians,\n    ratio = 2,\n    mutate = projectionMutator(hufnagelRaw),\n    projection = mutate(a, b, psiMax, ratio);\n\n  projection.a = function(_) {\n    return arguments.length ? mutate((a = +_), b, psiMax, ratio) : a;\n  };\n  projection.b = function(_) {\n    return arguments.length ? mutate(a, (b = +_), psiMax, ratio) : b;\n  };\n  projection.psiMax = function(_) {\n    return arguments.length\n      ? mutate(a, b, (psiMax = +_ * radians), ratio)\n      : psiMax * degrees;\n  };\n  projection.ratio = function(_) {\n    return arguments.length ? mutate(a, b, psiMax, (ratio = +_)) : ratio;\n  };\n\n  return projection.scale(180.739);\n}\n","// https://github.com/scijs/integrate-adaptive-simpson\n\n// This algorithm adapted from pseudocode in:\n// http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf\nfunction adsimp (f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n  if (state.nanEncountered) {\n    return NaN;\n  }\n\n  var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n\n  h = b - a;\n  f1 = f(a + h * 0.25);\n  f2 = f(b - h * 0.25);\n\n  // Simple check for NaN:\n  if (isNaN(f1)) {\n    state.nanEncountered = true;\n    return;\n  }\n\n  // Simple check for NaN:\n  if (isNaN(f2)) {\n    state.nanEncountered = true;\n    return;\n  }\n\n  sl = h * (fa + 4 * f1 + fm) / 12;\n  sr = h * (fm + 4 * f2 + fb) / 12;\n  s2 = sl + sr;\n  err = (s2 - V0) / 15;\n\n  if (depth > maxdepth) {\n    state.maxDepthCount++;\n    return s2 + err;\n  } else if (Math.abs(err) < tol) {\n    return s2 + err;\n  } else {\n    m = a + h * 0.5;\n\n    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V1)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V2)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    return V1 + V2;\n  }\n}\n\nexport function integrate (f, a, b, tol, maxdepth) {\n  var state = {\n    maxDepthCount: 0,\n    nanEncountered: false\n  };\n\n  if (tol === undefined) {\n    tol = 1e-8;\n  }\n  if (maxdepth === undefined) {\n    maxdepth = 20;\n  }\n\n  var fa = f(a);\n  var fm = f(0.5 * (a + b));\n  var fb = f(b);\n\n  var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n\n  var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n\n/*\n  if (state.maxDepthCount > 0 && console && console.warn) {\n    console.warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n  }\n\n  if (state.nanEncountered && console && console.warn) {\n    console.warn('integrate-adaptive-simpson: Warning: NaN encountered. Halting early.');\n  }\n*/\n\n  return result;\n}","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, pi, pow, sign, sin} from \"./math.js\";\nimport {integrate} from \"./integrate.js\";\n\nexport function hyperellipticalRaw(alpha, k, gamma) {\n\n  function elliptic (f) {\n    return alpha + (1 - alpha) * pow(1 - pow(f, k), 1 / k);\n  }\n\n  function z(f) {\n    return integrate(elliptic, 0, f, 1e-4);\n  }\n\n  var G = 1 / z(1),\n      n = 1000,\n      m = (1 + 1e-8) * G,\n      approx = [];\n  for (var i = 0; i <= n; i++)\n      approx.push(z(i / n) * m);\n\n  function Y(sinphi) {\n    var rmin = 0, rmax = n, r = n >> 1;\n    do {\n      if (approx[r] > sinphi) rmax = r; else rmin = r;\n      r = (rmin + rmax) >> 1;\n    } while (r > rmin);\n    var u = approx[r + 1] - approx[r];\n    if (u) u = (sinphi - approx[r + 1]) / u;\n    return (r + 1 + u) / n;\n  }\n\n  var ratio = 2 * Y(1) / pi * G / gamma;\n\n  var forward = function(lambda, phi) {\n    var y = Y(abs(sin(phi))),\n        x = elliptic(y) * lambda;\n    y /= ratio;\n    return [ x, (phi >= 0) ? y : -y ];\n  };\n\n  forward.invert = function(x, y) {\n    var phi;\n    y *= ratio;\n    if (abs(y) < 1) phi = sign(y) * asin(z(abs(y)) * G);\n    return [ x / elliptic(abs(y)), phi ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var alpha = 0,\n      k = 2.5,\n      gamma = 1.183136, // affine = sqrt(2 * gamma / pi) = 0.8679\n      m = projectionMutator(hyperellipticalRaw),\n      p = m(alpha, k, gamma);\n\n  p.alpha = function(_) {\n    return arguments.length ? m(alpha = +_, k, gamma) : alpha;\n  };\n\n  p.k = function(_) {\n    return arguments.length ? m(alpha, k = +_, gamma) : k;\n  };\n\n  p.gamma = function(_) {\n    return arguments.length ? m(alpha, k, gamma = +_) : gamma;\n  };\n\n  return p\n      .scale(152.63);\n}\n","import {merge} from \"d3-array\";\nimport {geoStream, geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon, radians} from \"../math.js\";\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction interpolateLine(coordinates, m) {\n  var i = -1,\n      n = coordinates.length,\n      p0 = coordinates[0],\n      p1,\n      dx,\n      dy,\n      resampled = [];\n  while (++i < n) {\n    p1 = coordinates[i];\n    dx = (p1[0] - p0[0]) / m;\n    dy = (p1[1] - p0[1]) / m;\n    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\n    p0 = p1;\n  }\n  resampled.push(p1);\n  return resampled;\n}\n\nfunction interpolateSphere(lobes) {\n  var coordinates = [],\n      lobe,\n      lambda0, phi0, phi1,\n      lambda2, phi2,\n      i, n = lobes[0].length;\n\n  // Northern Hemisphere\n  for (i = 0; i < n; ++i) {\n    lobe = lobes[0][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda0 + epsilon, phi0 + epsilon],\n      [lambda0 + epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi2 + epsilon]\n    ], 30));\n  }\n\n  // Southern Hemisphere\n  for (i = lobes[1].length - 1; i >= 0; --i) {\n    lobe = lobes[1][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda2 - epsilon, phi2 - epsilon],\n      [lambda2 - epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi0 - epsilon]\n    ], 30));\n  }\n\n  return {\n    type: \"Polygon\",\n    coordinates: [merge(coordinates)]\n  };\n}\n\nexport default function(project, lobes, inverse) {\n  var sphere, bounds;\n\n  function forward(lambda, phi) {\n    var sign = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);\n    var p = project(lambda - lobe[i][1][0], phi);\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\n    return p;\n  }\n\n  if (inverse) {\n    forward.invert = inverse(forward);\n  } else if (project.invert) {\n    forward.invert = function(x, y) {\n      var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];\n      for (var i = 0, n = bound.length; i < n; ++i) {\n        var b = bound[i];\n        if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n          var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\n          p[0] += lobe[i][1][0];\n          return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\n        }\n      }\n    };\n  }\n\n  var p = projection(forward),\n      stream_ = p.stream;\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere, sphereStream); };\n    return rotateStream;\n  };\n  \n  p.lobes = function(_) {\n    if (!arguments.length) return lobes.map(function(lobe) {\n      return lobe.map(function(l) {\n        return [\n          [l[0][0] * degrees, l[0][1] * degrees],\n          [l[1][0] * degrees, l[1][1] * degrees],\n          [l[2][0] * degrees, l[2][1] * degrees]\n        ];\n      });\n    });\n\n    sphere = interpolateSphere(_);\n\n    lobes = _.map(function(lobe) {\n      return lobe.map(function(l) {\n        return [\n          [l[0][0] * radians, l[0][1] * radians],\n          [l[1][0] * radians, l[1][1] * radians],\n          [l[2][0] * radians, l[2][1] * radians]\n        ];\n      });\n    });\n\n    bounds = lobes.map(function(lobe) {\n      return lobe.map(function(l) {\n        var x0 = project(l[0][0], l[0][1])[0],\n            x1 = project(l[2][0], l[2][1])[0],\n            y0 = project(l[1][0], l[0][1])[1],\n            y1 = project(l[1][0], l[1][1])[1],\n            t;\n        if (y0 > y1) t = y0, y0 = y1, y1 = t;\n        return [[x0, y0], [x1, y1]];\n      });\n    });\n\n    return p;\n  };\n\n  if (lobes != null) p.lobes(lobes);\n\n  return p;\n}\n","import {boggsRaw} from \"../boggs.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(boggsRaw, lobes)\n      .scale(160.857);\n}\n","import {homolosineRaw} from \"../homolosine.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(homolosineRaw, lobes)\n      .scale(152.63);\n}\n","import {mollweideRaw} from \"../mollweide.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529);\n}\n","import {mollweideRaw} from \"../mollweide.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [ -90,  90], [   0,   0]],\n  [[   0,   0], [  90,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [ -90, -90], [   0,   0]],\n  [[   0,   0], [  90, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529)\n      .rotate([20, 0]);\n}\n","import {sinuMollweideRaw} from \"../sinuMollweide.js\";\nimport interrupt from \"./index.js\";\nimport {solve2d} from \"../newton.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  35], [ -30,  90], [   0,  35]],\n  [[   0,  35], [  30,  90], [ 180,  35]]\n], [ // southern hemisphere\n  [[-180, -10], [-102, -90], [ -65, -10]],\n  [[ -65, -10], [   5, -90], [  77, -10]],\n  [[  77, -10], [ 103, -90], [ 180, -10]]\n]];\n\nexport default function() {\n  return interrupt(sinuMollweideRaw, lobes, solve2d)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {sinusoidalRaw} from \"../sinusoidal.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-110,  90], [ -40,   0]],\n  [[ -40,   0], [   0,  90], [  40,   0]],\n  [[  40,   0], [ 110,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-110, -90], [ -40,   0]],\n  [[ -40,   0], [   0, -90], [  40,   0]],\n  [[  40,   0], [ 110, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(sinusoidalRaw, lobes)\n      .scale(152.63)\n      .rotate([-20, 0]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt, tau} from \"./math.js\";\n\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function(x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function() {\n  return projection(kavrayskiy7Raw)\n      .scale(158.837);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin} from \"./math.js\";\n\nexport function lagrangeRaw(n) {\n\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [\n      2 * sin(lambda) / c,\n      (v - 1 / v) / c\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [\n      atan2(2 * x, 1 - x2 - y2) / n,\n      asin((t - 1) / (t + 1))\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function(_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \"./math.js\";\n\nvar pi_sqrt2 = pi / sqrt2;\n\nexport function larriveeRaw(lambda, phi) {\n  return [\n    lambda * (1 + sqrt(cos(phi))) / 2,\n    phi / (cos(phi / 2) * cos(lambda / 6))\n  ];\n}\n\nlarriveeRaw.invert = function(x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\n  else lambda += 6 * acos(pi_sqrt2 / y0);\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 + 0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function() {\n  return projection(larriveeRaw)\n      .scale(97.2672);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, pi, sign} from \"./math.js\";\n\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\n  return [\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\n  ];\n}\n\nlaskowskiRaw.invert = function(x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(laskowskiRaw)\n      .scale(139.98);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2} from \"./math.js\";\n\nexport function littrowRaw(lambda, phi) {\n  return [\n    sin(lambda) / cos(phi),\n    tan(phi) * cos(lambda)\n  ];\n}\n\nlittrowRaw.invert = function(x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      x2_y2_1 = x2 + y2_1,\n      cosPhi = x\n          ? sqrt1_2 * sqrt((x2_y2_1 - sqrt(x2_y2_1 * x2_y2_1 - 4 * x2)) / x2)\n          : 1 / sqrt(y2_1);\n  return [\n    asin(x * cosPhi),\n    sign(y) * acos(cosPhi)\n  ];\n};\n\nexport default function() {\n  return projection(littrowRaw)\n      .scale(144.049)\n      .clipAngle(90 - 1e-3);\n}\n","import parallel1 from \"./parallel1.js\";\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \"./math.js\";\n\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [\n      abs(y) < epsilon ? x / cosPhi0\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\n          : x * log(tan(lambda) / tanPhi0) / y,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(loximuthalRaw)\n      .parallel(40)\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, exp, log, quarterPi, pi, tan} from \"./math.js\";\n\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function(x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function() {\n  return projection(millerRaw)\n      .scale(108.318);\n}\n","import {geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \"./math.js\";\n\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function(x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n\n      var denominator = br * br + bi * bi, deltar, deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\n\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\n\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64])\n      .scale(1400)\n      .center([-160.908, 62.4864])\n      .clipAngle(30)\n      .angle(7.8);\n}\n\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38])\n      .scale(1000)\n      .clipAngle(55)\n      .center([-96.5563, 38.8675]);\n}\n\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45])\n      .scale(359.513)\n      .clipAngle(55)\n      .center([-117.474, 53.0628]);\n}\n\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18])\n      .scale(209.091)\n      .center([20, 16.7214])\n      .clipAngle(82);\n}\n\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10])\n      .scale(250)\n      .clipAngle(130)\n      .center([-165, -10]);\n}\n\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math.js\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math.js\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon2} from \"./math.js\";\n\nexport function naturalEarth2Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2, phi6 = phi2 * phi4;\n  return [\n    lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),\n    phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))\n  ];\n}\n\nnaturalEarth2Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta, phi2, phi4, phi6;\n  do {\n    phi2 = phi * phi; phi4 = phi2 * phi2;\n    phi -= delta = ((phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))) - y) /\n      (1.01183 + phi4 * phi4 * ((9 * -0.02625) + (11 * 0.01926) * phi2 + (13 * -0.00396) * phi4));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  phi2 = phi * phi; phi4 = phi2 * phi2; phi6 = phi2 * phi4;\n  return [\n    x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth2Raw)\n      .scale(175.295);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, epsilon, tan} from \"./math.js\";\n\nexport function nellHammerRaw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / 2,\n    2 * (phi - tan(phi / 2))\n  ];\n}\n\nnellHammerRaw.invert = function(x, y) {\n  var p = y / 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n  return [\n    2 * x / (1 + cos(y)),\n    y\n  ];\n};\n\nexport default function() {\n  return projection(nellHammerRaw)\n      .scale(152.63);\n}\n","import {hammerRaw} from \"../hammer.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  0],  [-90,  90], [   0,  0]],\n  [[   0,  0], [  90,  90], [ 180, 0]]\n], [ // southern hemisphere\n  [[-180, 0], [-90, -90], [  0, 0]],\n  [[   0, 0], [ 90, -90], [180, 0]]\n]];\n\nexport default function() {\n  return interrupt(hammerRaw(Infinity), lobes)\n      .rotate([20, 0])\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, halfPi, pi, sign, sin, sqrt} from \"./math.js\";\nimport {solve} from \"./newton.js\";\n\n// Based on Torben Jansen's implementation\n// https://beta.observablehq.com/@toja/nicolosi-globular-projection\n// https://beta.observablehq.com/@toja/nicolosi-globular-inverse\n\nexport function nicolosiRaw(lambda, phi) {\n  var sinPhi = sin(phi),\n    q = cos(phi),\n    s = sign(lambda);\n\n  if (lambda === 0 || abs(phi) === halfPi) return [0, phi];\n  else if (phi === 0) return [lambda, 0];\n  else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];\n\n  var b = pi / (2 * lambda) - (2 * lambda) / pi,\n    c = (2 * phi) / pi,\n    d = (1 - c * c) / (sinPhi - c);\n\n  var b2 = b * b,\n    d2 = d * d,\n    b2d2 = 1 + b2 / d2,\n    d2b2 = 1 + d2 / b2;\n\n  var M = ((b * sinPhi) / d - b / 2) / b2d2,\n    N = ((d2 * sinPhi) / b2 + d / 2) / d2b2,\n    m = M * M + (q * q) / b2d2,\n    n = N * N - ((d2 * sinPhi * sinPhi) / b2 + d * sinPhi - 1) / d2b2;\n\n  return [\n    halfPi * (M + sqrt(m) * s),\n    halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)\n  ];\n}\n\nnicolosiRaw.invert = function(x, y) {\n\n  x /= halfPi;\n  y /= halfPi;\n\n  var x2 = x * x,\n    y2 = y * y,\n    x2y2 = x2 + y2,\n    pi2 = pi * pi;\n\n  return [\n    x ? (x2y2 -1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0,\n    solve(function(phi) {\n      return (\n        x2y2 * (pi * sin(phi) - 2 * phi) * pi +\n        4 * phi * phi * (y - sin(phi)) +\n        2 * pi * phi -\n        pi2 * y\n      );\n    }, 0)\n  ];\n};\n\nexport default function() {\n  return projection(nicolosiRaw)\n    .scale(127.267);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math.js\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan} from \"./math.js\";\n\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [\n    sin(k) / tanPhi,\n    phi + (1 - cos(k)) / tanPhi\n  ];\n}\n\npolyconicRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10, delta;\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n  tanPhi = tan(phi);\n  return [\n    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(y) * sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(polyconicRaw)\n      .scale(103.74);\n}\n","import {atan2, cos, sin, sqrt} from \"../math.js\";\n\n// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n\n// Transform matrix for [a0, a1] -> [b0, b1].\nexport default function(a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n\n  return multiply([\n    1, 0, a[0][0],\n    0, 1, a[0][1]\n  ], multiply([\n    s, 0, 0,\n    0, s, 0\n  ], multiply([\n    cos(phi), sin(phi), 0,\n    -sin(phi), cos(phi), 0\n  ], [\n    1, 0, -b[0][0],\n    0, 1, -b[0][1]\n  ])));\n}\n\n// Inverts a transform matrix.\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [\n    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),\n    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])\n  ];\n}\n\n// Multiplies two 3x2 matrices.\nexport function multiply(a, b) {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[0] * b[2] + a[1] * b[5] + a[2],\n    a[3] * b[0] + a[4] * b[3],\n    a[3] * b[1] + a[4] * b[4],\n    a[3] * b[2] + a[4] * b[5] + a[5]\n  ];\n}\n\n// Subtracts 2D vectors.\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n\n// Magnitude of a 2D vector.\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\n// Angle between two 2D vectors.\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}\n","import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon, radians} from \"../math.js\";\nimport {default as matrix, multiply, inverse} from \"./matrix.js\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\nexport default function(root, face) {\n\n  recurse(root, {transform: null});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj.angle(-30);\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edge…\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [\n  [0, 90],\n  [-90, 0], [0, 0], [90, 0], [180, 0],\n  [0, -90]\n];\n\nexport default [\n  [0, 2, 1],\n  [0, 3, 2],\n  [5, 1, 2],\n  [5, 2, 3],\n  [0, 1, 4],\n  [0, 4, 3],\n  [5, 4, 1],\n  [5, 3, 4]\n].map(function(face) {\n  return face.map(function(i) {\n    return octahedron[i];\n  });\n});\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {pi} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .angle(-30)\n      .scale(101.858)\n      .center([0, 45]);\n}\n","import {geoCentroid as centroid, geoProjection as projection} from \"d3-geo\";\nimport {collignonRaw} from \"../collignon.js\";\nimport {pi, sqrt} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function(x,y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .angle(-30)\n      .scale(121.906)\n      .center([0, 48.5904]);\n}\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = face.length === 6 ? centroid({type: \"MultiPoint\", coordinates: face}) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function(face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n      ]), spherical([\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n      ]));\n      a = b;\n    }\n    return hexagon;\n  });\n\n  var cornerNormals = [];\n\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n\n  w5.forEach(function(hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([\n        face[i],\n        hexagon[(i * 2 + 2) % (2 * n)],\n        hexagon[(i * 2 + 1) % (2 * n)]\n      ]);\n      parents.push(j);\n      normals.push(cross(\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\n      ));\n    }\n  });\n\n  var faces = w5.map(function(face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n\n  parents.forEach(function(d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n        : lambda < 0 ? phi < 0 ? 2 : 0\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\n        : phi < 0 ? 7 : 5;\n\n    var n = cornerNormals[hexagon];\n\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n        : hexagon];\n  }\n\n  return polyhedral(faces[0], face)\n      .angle(-30)\n      .scale(110.625)\n      .center([0,45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\n\nfunction cross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0]\n  ];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [\n    cosphi * cos(lambda),\n    cosphi * sin(lambda),\n    sin(phi)\n  ];\n}\n","export default () => {}\n","import {geoStream} from \"d3-geo\";\nimport noop from \"../noop.js\";\nimport clockwise from \"./clockwise.js\";\nimport contains from \"./contains.js\";\n\nexport default function(object, projection) {\n  var stream = projection.stream, project;\n  if (!stream) throw new Error(\"invalid projection\");\n  switch (object && object.type) {\n    case \"Feature\": project = projectFeature; break;\n    case \"FeatureCollection\": project = projectFeatureCollection; break;\n    default: project = projectGeometry; break;\n  }\n  return project(object, stream);\n}\n\nfunction projectFeatureCollection(o, stream) {\n  return {\n    type: \"FeatureCollection\",\n    features: o.features.map(function(f) {\n      return projectFeature(f, stream);\n    })\n  };\n}\n\nfunction projectFeature(o, stream) {\n  return {\n    type: \"Feature\",\n    id: o.id,\n    properties: o.properties,\n    geometry: projectGeometry(o.geometry, stream)\n  };\n}\n\nfunction projectGeometryCollection(o, stream) {\n  return {\n    type: \"GeometryCollection\",\n    geometries: o.geometries.map(function(o) {\n      return projectGeometry(o, stream);\n    })\n  };\n}\n\nfunction projectGeometry(o, stream) {\n  if (!o) return null;\n  if (o.type === \"GeometryCollection\") return projectGeometryCollection(o, stream);\n  var sink;\n  switch (o.type) {\n    case \"Point\": sink = sinkPoint; break;\n    case \"MultiPoint\": sink = sinkPoint; break;\n    case \"LineString\": sink = sinkLine; break;\n    case \"MultiLineString\": sink = sinkLine; break;\n    case \"Polygon\": sink = sinkPolygon; break;\n    case \"MultiPolygon\": sink = sinkPolygon; break;\n    case \"Sphere\": sink = sinkPolygon; break;\n    default: return null;\n  }\n  geoStream(o, stream(sink));\n  return sink.result();\n}\n\nvar points = [],\n    lines = [];\n\nvar sinkPoint = {\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  result: function() {\n    var result = !points.length ? null\n        : points.length < 2 ? {type: \"Point\", coordinates: points[0]}\n        : {type: \"MultiPoint\", coordinates: points};\n    points = [];\n    return result;\n  }\n};\n\nvar sinkLine = {\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    if (points.length) lines.push(points), points = [];\n  },\n  result: function() {\n    var result = !lines.length ? null\n        : lines.length < 2 ? {type: \"LineString\", coordinates: lines[0]}\n        : {type: \"MultiLineString\", coordinates: lines};\n    lines = [];\n    return result;\n  }\n};\n\nvar sinkPolygon = {\n  polygonStart: noop,\n  lineStart: noop,\n  point: function(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function() {\n    var n = points.length;\n    if (n) {\n      do points.push(points[0].slice()); while (++n < 4);\n      lines.push(points), points = [];\n    }\n  },\n  polygonEnd: noop,\n  result: function() {\n    if (!lines.length) return null;\n    var polygons = [],\n        holes = [];\n\n    // https://github.com/d3/d3/issues/1558\n    lines.forEach(function(ring) {\n      if (clockwise(ring)) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      var point = hole[0];\n      polygons.some(function(polygon) {\n        if (contains(polygon[0], point)) {\n          polygon.push(hole);\n          return true;\n        }\n      }) || polygons.push([hole]);\n    });\n\n    lines = [];\n\n    return !polygons.length ? null\n        : polygons.length > 1 ? {type: \"MultiPolygon\", coordinates: polygons}\n        : {type: \"Polygon\", coordinates: polygons[0]};\n  }\n};\n","export default function(ring) {\n  if ((n = ring.length) < 4) return false;\n  var i = 0,\n      n,\n      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area <= 0;\n}\n","export default function(ring, point) {\n  var x = point[0],\n      y = point[1],\n      contains = false;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1],\n        pj = ring[j], xj = pj[0], yj = pj[1];\n    if (((yi > y) ^ (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) contains = !contains;\n  }\n  return contains;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, halfPi, pi, sign, sqrt1_2} from \"../math.js\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectQuincuncial(lambda, phi) {\n    var t = abs(lambda) < halfPi,\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\n        x = (p[0] - p[1]) * sqrt1_2,\n        y = (p[0] + p[1]) * sqrt1_2;\n    if (t) return [x, y];\n    var d = dx * sqrt1_2,\n        s = x > 0 ^ y > 0 ? -1 : 1;\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\n  }\n\n  if (project.invert) projectQuincuncial.invert = function(x0, y0) {\n    var x = (x0 + y0) * sqrt1_2,\n        y = (y0 - x0) * sqrt1_2,\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\n\n    if (!t) {\n      var d = dx * sqrt1_2,\n          s = x > 0 ^ y > 0 ? -1 : 1,\n          x1 = -s * x0 + (y > 0 ? 1 : -1) * d,\n          y1 = -s * y0 + (x > 0 ? 1 : -1) * d;\n      x = (-x1 - y1) * sqrt1_2;\n      y = (x1 - y1) * sqrt1_2;\n    }\n\n    var p = project.invert(x, y);\n    if (!t) p[0] += x > 0 ? pi : -pi;\n    return p;\n  };\n\n  return projection(projectQuincuncial)\n      .rotate([-90, -90, 45])\n      .clipAngle(180 - 1e-3);\n}\n","import {gringortenRaw} from \"../gringorten.js\";\nimport quincuncial from \"./index.js\";\n\nexport default function() {\n  return quincuncial(gringortenRaw)\n      .scale(176.423);\n}\n","import {guyouRaw} from \"../guyou.js\";\nimport quincuncial from \"./index.js\";\n\nexport default function() {\n  return quincuncial(guyouRaw)\n      .scale(111.48);\n}\n","export default function(input, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n\n  function quantizePoint(input) {\n    var n = input.length, i = 2, output = new Array(n);\n    output[0] = +input[0].toFixed(digits);\n    output[1] = +input[1].toFixed(digits);\n    while (i < n) output[i] = input[i], ++i;\n    return output;\n  }\n\n  function quantizePoints(input) {\n    return input.map(quantizePoint);\n  }\n\n  function quantizePointsNoDuplicates(input) {\n    var point0 = quantizePoint(input[0]);\n    var output = [point0];\n    for (var i = 1; i < input.length; i++) {\n      var point = quantizePoint(input[i]);\n      if (point.length > 2 || point[0] != point0[0] || point[1] != point0[1]) {\n        output.push(point);\n        point0 = point;\n      }\n    }\n    if (output.length === 1 && input.length > 1) {\n      output.push(quantizePoint(input[input.length - 1]));\n    }\n    return output;\n  }\n\n  function quantizePolygon(input) {\n    return input.map(quantizePointsNoDuplicates);\n  }\n\n  function quantizeGeometry(input) {\n    if (input == null) return input;\n    var output;\n    switch (input.type) {\n      case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(quantizeGeometry)}; break;\n      case \"Point\": output = {type: \"Point\", coordinates: quantizePoint(input.coordinates)}; break;\n      case \"MultiPoint\": output = {type: input.type, coordinates: quantizePoints(input.coordinates)}; break;\n      case \"LineString\": output = {type: input.type, coordinates: quantizePointsNoDuplicates(input.coordinates)}; break;\n      case \"MultiLineString\": case \"Polygon\": output = {type: input.type, coordinates: quantizePolygon(input.coordinates)}; break;\n      case \"MultiPolygon\": output = {type: \"MultiPolygon\", coordinates: input.coordinates.map(quantizePolygon)}; break;\n      default: return input;\n    }\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n\n  function quantizeFeature(input) {\n    var output = {type: \"Feature\", properties: input.properties, geometry: quantizeGeometry(input.geometry)};\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n\n  if (input != null) switch (input.type) {\n    case \"Feature\": return quantizeFeature(input);\n    case \"FeatureCollection\": {\n      var output = {type: \"FeatureCollection\", features: input.features.map(quantizeFeature)};\n      if (input.bbox != null) output.bbox = input.bbox;\n      return output;\n    }\n    default: return quantizeGeometry(input);\n  }\n\n  return input;\n}\n","import {abs, acos, asin, atan, cos, epsilon, pi, sin, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [\n      sin(E) * cotPhi,\n      phi + (1 - cos(E)) * cotPhi - phi0\n    ];\n  }\n\n  // TODO return null for points outside outline.\n  forward.invert = function(x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10, delta;\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [\n      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(rectangularPolyconicRaw)\n      .scale(131.215);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon2, floor, max, min, pi, radians, sign} from \"./math.js\";\n\nvar K = [\n  [0.9986, -0.062],\n  [1.0000, 0.0000],\n  [0.9986, 0.0620],\n  [0.9954, 0.1240],\n  [0.9900, 0.1860],\n  [0.9822, 0.2480],\n  [0.9730, 0.3100],\n  [0.9600, 0.3720],\n  [0.9427, 0.4340],\n  [0.9216, 0.4958],\n  [0.8962, 0.5571],\n  [0.8679, 0.6176],\n  [0.8350, 0.6769],\n  [0.7986, 0.7346],\n  [0.7597, 0.7903],\n  [0.7186, 0.8435],\n  [0.6732, 0.8936],\n  [0.6213, 0.9394],\n  [0.5722, 0.9761],\n  [0.5322, 1.0000]\n];\n\nK.forEach(function(d) {\n  d[1] *= 1.593415793900743;\n});\n\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    sign(phi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\n  ];\n}\n\nrobinsonRaw.invert = function(x, y) {\n  var phi = y * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(y) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50, delta;\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = sign(y) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n      break;\n    }\n  } while (--i0 >= 0);\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    phi * radians\n  ];\n};\n\nexport default function() {\n  return projection(robinsonRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \"./math.js\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [\n      k * cosPhi * sin(lambda),\n      k * sin(phi)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\n      rho ? asin(y * sinc / rho) : 0\n    ];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [\n      coordinates[0] * cosOmega / A,\n      y / A\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega);\n\n  // As a multiple of radius.\n  p.distance = function(_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function(_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p\n      .scale(432.147)\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\n}\n","var epsilon = 1e-4,\n    epsilonInverse = 1e4,\n    x0 = -180, x0e = x0 + epsilon,\n    x1 = 180, x1e = x1 - epsilon,\n    y0 = -90, y0e = y0 + epsilon,\n    y1 = 90, y1e = y1 - epsilon;\n\nfunction nonempty(coordinates) {\n  return coordinates.length > 0;\n}\n\nfunction quantize(x) {\n  return Math.floor(x * epsilonInverse) / epsilonInverse;\n}\n\nfunction normalizePoint(y) {\n  return y === y0 || y === y1 ? [0, y] : [x0, quantize(y)]; // pole or antimeridian?\n}\n\nfunction clampPoint(p) {\n  var x = p[0], y = p[1], clamped = false;\n  if (x <= x0e) x = x0, clamped = true;\n  else if (x >= x1e) x = x1, clamped = true;\n  if (y <= y0e) y = y0, clamped = true;\n  else if (y >= y1e) y = y1, clamped = true;\n  return clamped ? [x, y] : p;\n}\n\nfunction clampPoints(points) {\n  return points.map(clampPoint);\n}\n\n// For each ring, detect where it crosses the antimeridian or pole.\nfunction extractFragments(rings, polygon, fragments) {\n  for (var j = 0, m = rings.length; j < m; ++j) {\n    var ring = rings[j].slice();\n\n    // By default, assume that this ring doesn’t need any stitching.\n    fragments.push({index: -1, polygon: polygon, ring: ring});\n\n    for (var i = 0, n = ring.length; i < n; ++i) {\n      var point = ring[i],\n          x = point[0],\n          y = point[1];\n\n      // If this is an antimeridian or polar point…\n      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {\n        ring[i] = clampPoint(point);\n\n        // Advance through any antimeridian or polar points…\n        for (var k = i + 1; k < n; ++k) {\n          var pointk = ring[k],\n              xk = pointk[0],\n              yk = pointk[1];\n          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;\n        }\n\n        // If this was just a single antimeridian or polar point,\n        // we don’t need to cut this ring into a fragment;\n        // we can just leave it as-is.\n        if (k === i + 1) continue;\n\n        // Otherwise, if this is not the first point in the ring,\n        // cut the current fragment so that it ends at the current point.\n        // The current point is also normalized for later joining.\n        if (i) {\n          var fragmentBefore = {index: -1, polygon: polygon, ring: ring.slice(0, i + 1)};\n          fragmentBefore.ring[fragmentBefore.ring.length - 1] = normalizePoint(y);\n          fragments[fragments.length - 1] = fragmentBefore;\n        }\n\n        // If the ring started with an antimeridian fragment,\n        // we can ignore that fragment entirely.\n        else fragments.pop();\n\n        // If the remainder of the ring is an antimeridian fragment,\n        // move on to the next ring.\n        if (k >= n) break;\n\n        // Otherwise, add the remaining ring fragment and continue.\n        fragments.push({index: -1, polygon: polygon, ring: ring = ring.slice(k - 1)});\n        ring[0] = normalizePoint(ring[0][1]);\n        i = -1;\n        n = ring.length;\n      }\n    }\n  }\n}\n\n// Now stitch the fragments back together into rings.\nfunction stitchFragments(fragments) {\n  var i, n = fragments.length;\n\n  // To connect the fragments start-to-end, create a simple index by end.\n  var fragmentByStart = {},\n      fragmentByEnd = {},\n      fragment,\n      start,\n      startFragment,\n      end,\n      endFragment;\n\n  // For each fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    start = fragment.ring[0];\n    end = fragment.ring[fragment.ring.length - 1];\n\n    // If this fragment is closed, add it as a standalone ring.\n    if (start[0] === end[0] && start[1] === end[1]) {\n      fragment.polygon.push(fragment.ring);\n      fragments[i] = null;\n      continue;\n    }\n\n    fragment.index = i;\n    fragmentByStart[start] = fragmentByEnd[end] = fragment;\n  }\n\n  // For each open fragment…\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    if (fragment) {\n      start = fragment.ring[0];\n      end = fragment.ring[fragment.ring.length - 1];\n      startFragment = fragmentByEnd[start];\n      endFragment = fragmentByStart[end];\n\n      delete fragmentByStart[start];\n      delete fragmentByEnd[end];\n\n      // If this fragment is closed, add it as a standalone ring.\n      if (start[0] === end[0] && start[1] === end[1]) {\n        fragment.polygon.push(fragment.ring);\n        continue;\n      }\n\n      if (startFragment) {\n        delete fragmentByEnd[start];\n        delete fragmentByStart[startFragment.ring[0]];\n        startFragment.ring.pop(); // drop the shared coordinate\n        fragments[startFragment.index] = null;\n        fragment = {index: -1, polygon: startFragment.polygon, ring: startFragment.ring.concat(fragment.ring)};\n\n        if (startFragment === endFragment) {\n          // Connect both ends to this single fragment to create a ring.\n          fragment.polygon.push(fragment.ring);\n        } else {\n          fragment.index = n++;\n          fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);\n        }\n      } else if (endFragment) {\n        delete fragmentByStart[end];\n        delete fragmentByEnd[endFragment.ring[endFragment.ring.length - 1]];\n        fragment.ring.pop(); // drop the shared coordinate\n        fragment = {index: n++, polygon: endFragment.polygon, ring: fragment.ring.concat(endFragment.ring)};\n        fragments[endFragment.index] = null;\n        fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);\n      } else {\n        fragment.ring.push(fragment.ring[0]); // close ring\n        fragment.polygon.push(fragment.ring);\n      }\n    }\n  }\n}\n\nfunction stitchFeature(input) {\n  var output = {type: \"Feature\", geometry: stitchGeometry(input.geometry)};\n  if (input.id != null) output.id = input.id;\n  if (input.bbox != null) output.bbox = input.bbox;\n  if (input.properties != null) output.properties = input.properties;\n  return output;\n}\n\nfunction stitchGeometry(input) {\n  if (input == null) return input;\n  var output, fragments, i, n;\n  switch (input.type) {\n    case \"GeometryCollection\": output = {type: \"GeometryCollection\", geometries: input.geometries.map(stitchGeometry)}; break;\n    case \"Point\": output = {type: \"Point\", coordinates: clampPoint(input.coordinates)}; break;\n    case \"MultiPoint\": case \"LineString\": output = {type: input.type, coordinates: clampPoints(input.coordinates)}; break;\n    case \"MultiLineString\": output = {type: \"MultiLineString\", coordinates: input.coordinates.map(clampPoints)}; break;\n    case \"Polygon\": {\n      var polygon = [];\n      extractFragments(input.coordinates, polygon, fragments = []);\n      stitchFragments(fragments);\n      output = {type: \"Polygon\", coordinates: polygon};\n      break;\n    }\n    case \"MultiPolygon\": {\n      fragments = [], i = -1, n = input.coordinates.length;\n      var polygons = new Array(n);\n      while (++i < n) extractFragments(input.coordinates[i], polygons[i] = [], fragments);\n      stitchFragments(fragments);\n      output = {type: \"MultiPolygon\", coordinates: polygons.filter(nonempty)};\n      break;\n    }\n    default: return input;\n  }\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n\nexport default function(input) {\n  if (input == null) return input;\n  switch (input.type) {\n    case \"Feature\": return stitchFeature(input);\n    case \"FeatureCollection\": {\n      var output = {type: \"FeatureCollection\", features: input.features.map(stitchFeature)};\n      if (input.bbox != null) output.bbox = input.bbox;\n      return output;\n    }\n    default: return stitchGeometry(input);\n  }\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, quarterPi, sin, tan} from \"./math.js\";\n\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [\n    lambda * (0.74482 - 0.34588 * s * s),\n    1.70711 * t\n  ];\n}\n\ntimesRaw.invert = function(x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [\n    x / (0.74482 - 0.34588 * s * s),\n    2 * atan(t)\n  ];\n};\n\nexport default function() {\n  return projection(timesRaw)\n      .scale(146.153);\n}\n","import {geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {asin, degrees, pi, sin, radians} from \"./math.js\";\n\n// Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\nexport default function(raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoGnomonicRaw as gnomonicRaw} from \"d3-geo\";\nimport {cos} from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\";\n\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\n\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39])\n      .clipAngle(60)\n      .scale(400);\n}\n\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {acos, atan2, cos, sin, sqrt, tan} from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\";\n\nexport function twoPointEquidistantRaw(z0) {\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\n  var lambdaa = -z0 / 2,\n      lambdab = -lambdaa,\n      z02 = z0 * z0,\n      tanLambda0 = tan(lambdab),\n      S = 0.5 / sin(lambdab);\n\n  function forward(lambda, phi) {\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\n        ys = phi < 0 ? -1 : 1;\n    za *= za, zb *= zb;\n    return [\n      (za - zb) / (2 * z0),\n      ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y2 = y * y,\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\n        t,\n        d;\n    return [\n      atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0),\n      (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)\n    ];\n  };\n\n  return forward;\n}\n\nexport function twoPointEquidistantUsa() {\n  return twoPointEquidistant([-158, 21.5], [-77, 39])\n      .clipAngle(130)\n      .scale(122.571);\n}\n\nexport default function twoPointEquidistant(p0, p1) {\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n  ];\n}\n\nvanDerGrintenRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrintenRaw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [\n    sign(lambda) * pi * x1,\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\n  ];\n}\n\nvanDerGrinten2Raw.invert = function(x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [\n    sign(x) * pi * (B - A),\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten2Raw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, halfPi, min, pi, sign, sqrt} from \"./math.js\";\n\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [\n    sign(lambda) * halfPi * x1,\n    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)\n  ];\n}\n\nvanDerGrinten4Raw.invert = function(x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  var sy = sign(y);\n  y = abs(y) / pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = y * (2 - (y > 0.5 ? min(y, abs(x)) : 0)),\n      r = x * x + y * y,\n      i = 50;\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta * r * r > epsilon && --i > 0);\n  return [\n    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,\n    sy * halfPi * B\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten4Raw)\n      .scale(127.16);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, epsilon, halfPi, max, min, pi, radians, sin, sqrt, tan} from \"./math.js\";\n\nfunction wagnerFormula(cx, cy, m1, m2, n) {\n  function forward(lambda, phi) {\n    var s = m1 * sin(m2 * phi),\n        c0 = sqrt(1 - s * s),\n        c1 = sqrt(2 / (1 + c0 * cos(lambda *= n)));\n    return [\n      cx * c0 * c1 * sin(lambda),\n      cy * s * c1\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var t1 = x / cx,\n        t2 = y / cy,\n        p = sqrt(t1 * t1 + t2 * t2),\n        c = 2 * asin(p / 2);\n    return [\n      atan2(x * tan(c), cx * p) / n,\n      p && asin(y * sin(c) / (cy * m1 * p)) / m2\n    ];\n  };\n\n  return forward;\n}\n\nexport function wagnerRaw(poleline, parallels, inflation, ratio) {\n  // 60 is always used as reference parallel\n  var phi1 = pi / 3;\n\n  // sanitizing the input values\n  // poleline and parallels may approximate but never equal 0\n  poleline = max(poleline, epsilon);\n  parallels = max(parallels, epsilon);\n  // poleline must be <= 90; parallels may approximate but never equal 180\n  poleline = min(poleline, halfPi);\n  parallels = min(parallels, pi - epsilon);\n  // 0 <= inflation <= 99.999\n  inflation = max(inflation, 0);\n  inflation = min(inflation, 100 - epsilon);\n  // ratio > 0.\n  // sensible values, i.e. something that renders a map which still can be\n  // recognized as world map, are e.g. 20 <= ratio <= 1000.\n  ratio = max(ratio, epsilon);\n\n  // convert values from boehm notation\n  // areal inflation e.g. from 0 to 1 or 20 to 1.2:\n  var vinflation = inflation/100 + 1;\n  // axial ratio e.g. from 200 to 2:\n  var vratio  = ratio / 100;\n  // the other ones are a bit more complicated...\n  var m2 = acos(vinflation * cos(phi1)) / phi1,\n      m1 = sin(poleline) / sin(m2 * halfPi),\n      n = parallels / pi,\n      k = sqrt(vratio * sin(poleline / 2) / sin(parallels / 2)),\n      cx = k / sqrt(n * m1 * m2),\n      cy = 1 / (k * sqrt(n * m1 * m2));\n\n  return wagnerFormula(cx, cy, m1, m2, n);\n}\n\nexport default function wagner() {\n  // default values generate wagner8\n  var poleline = 65 * radians,\n      parallels = 60 * radians,\n      inflation = 20,\n      ratio = 200,\n      mutate = projectionMutator(wagnerRaw),\n      projection = mutate(poleline, parallels, inflation, ratio);\n\n  projection.poleline = function(_) {\n    return arguments.length ? mutate(poleline = +_ * radians, parallels, inflation, ratio) : poleline * degrees;\n  };\n\n  projection.parallels = function(_) {\n    return arguments.length ? mutate(poleline, parallels = +_ * radians, inflation, ratio) : parallels * degrees;\n  };\n  projection.inflation = function(_) {\n    return arguments.length ? mutate(poleline, parallels, inflation = +_, ratio) : inflation;\n  };\n  projection.ratio = function(_) {\n    return arguments.length ? mutate(poleline, parallels, inflation, ratio = +_) : ratio;\n  };\n\n  return projection\n    .scale(163.775);\n}\n\nexport function wagner7() {\n  return wagner()\n      .poleline(65)\n      .parallels(60)\n      .inflation(0)\n      .ratio(200)\n      .scale(172.633);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {sqrt, pi} from \"./math.js\";\nimport {mollweideBromleyRaw} from \"./mollweide.js\";\n\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\n\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\n\nexport default function() {\n  return projection(wagner4Raw)\n      .scale(176.84);\n}\n","/**\n * External Dependencies\n */\nimport * as d3 from 'd3';\nimport * as d3GeoProjection from 'd3-geo-projection';\n\nfunction loadScript(slug, script) {\n\tif (!window[slug]) {\n\t\twindow[slug] = script;\n\t}\n}\n\nloadScript('d3GeoProjection', d3GeoProjection);\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math.js\";\n\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function(x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function() {\n  return projection(wagner6Raw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt} from \"./math.js\";\n\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [\n    sinLambda * cosPhi - cosLambda * sin1_Phi,\n    -cosLambda * cosPhi - sinLambda * sin1_Phi\n  ];\n}\n\nwiechelRaw.invert = function(x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [\n    atan2(k * b, D * (1 + w)),\n    D ? -asin(k * a / D) : 0\n  ];\n};\n\nexport default function() {\n  return projection(wiechelRaw)\n      .rotate([0, -90, 45])\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {aitoffRaw} from \"./aitoff.js\";\nimport {halfPi, epsilon, sin, cos, sqrt, abs, acos} from \"./math.js\";\n\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [\n    (coordinates[0] + lambda / halfPi) / 2,\n    (coordinates[1] + phi) / 2\n  ];\n}\n\nwinkel3Raw.invert = function(x, y) {\n  var lambda = x, phi = y, i = 25;\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(winkel3Raw)\n      .scale(158.837);\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","window","abs","Math","atan","atan2","cos","ceil","exp","floor","log","max","min","pow","round","sign","x","sin","tan","epsilon","epsilon2","pi","PI","halfPi","quarterPi","sqrt1_2","SQRT1_2","sqrt2","sqrt","sqrtPi","tau","degrees","radians","asin","acos","sinh","cosh","airyRaw","beta","tanBeta_2","b","forward","y","cosx","cosy","siny","cosz","k","invert","delta","r","z","i","z_2","cosz_2","sinz_2","tanz_2","lnsecz_2","sinz","m","p","radius","_","arguments","length","scale","clipAngle","aitoffRaw","sincia","sinci","armadilloRaw","phi0","sinPhi0","cosPhi0","sPhi0","tanPhi0","lambda","phi","cosPhi","cosLambda","sinLambda","sinPhi","A","fx","fy","dxdLambda","dxdPhi","dydLambda","dydPhi","denominator","dLambda","dPhi","stream_","stream","parallel","rotate","rotateStream","sphereStream","precision","sphere","polygonStart","lineStart","point","lineEnd","polygonEnd","center","augustRaw","tanPhi","c","x2","y2","x1","y1","f","sinx","sinx_2","cosx_2","sin_2y","sin2y","cos2y","sin2x_2","e","dxdx","dxdy","dydx","dydy","dx","dy","s","sin3Eta","eta","xi","arcosh","arsinh","cosEta","coshXi","d","sqrt8","bakerRaw","berghausRaw","lobes","theta","theta0","alpha","cotAlpha","projectionStream","cr","sr","delta0","hammerRaw","B","Infinity","hammerQuarticAuthalicRaw","coordinates","coefficient","solve","f0","f1","steps","undefined","NaN","solve2d","MAX_ITERATIONS","eps","a","err2","da","db","tx","ty","h","ea","eb","pa","pb","dxa","dya","dxb","dyb","D","l","bertin1953Raw","hammer","u","mollweideBromleyTheta","cp","cpsinPhi","mollweideBromleyRaw","cx","cy","y0","cosPhi_2","tanPhi_2","mollweideRaw","w","boggsRaw","projectAt","sinusoidalRaw","bonneRaw","cotPhi0","rho","parallel1","bottomleyRaw","sinPsi","fraction","ky","bromleyRaw","distance","c1","s1","c2","s2","cosdLambda","sindPhi","sindLambda","angle","longitude","chamberlinRaw","p0","p1","p2","points","v","beta0","beta1","beta2","mean","Array","slice","j","pointRadians","chamberlinAfrica","chamberlin","type","R","collignonRaw","craigRaw","sqrt3","crasterRaw","cylindricalEqualAreaRaw","cylindricalStereographicRaw","eckert1Raw","eckert2Raw","eckert3Raw","eckert4Raw","eckert5Raw","eckert6Raw","eisenlohrK","eisenlohrRaw","s0","c0","t","_0","_1","cos1","t2","v2","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","deltaLambda","deltaPhi","faheyK","faheyRaw","foucautRaw","cosk","foucautSinusoidalRaw","equatorial","raw","ratio","cosphi","sinphi","forwardMeridian","gilbertForward","gilbertInvert","projectionType","geoOrthographic","projection","equirectangular","geoEquirectangular","translate","gilbert","property","name","apply","gingeryRaw","n","rho2","r2","rhoCosAlpha","k_","s_","gingeryLength","gingeryIntegrate","dTheta","x_halfPi","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","y_","cRho","sRho","g","phi2","xB","yB","q","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","cosAlpha","sinAlpha","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg4Raw","ginzburgPolyconic","ginzburg5Raw","ginzburg6Raw","ginzburg8Raw","lambda2","lambda4","ginzburg9Raw","project","projectSquare","location","gringortenRaw","sLambda","sPhi","a2","secPhi","drdPhi","dp2dPhi","mu","nu","zeta","lambda1","x0","g2","zetaMug","f2","gringortenHexadecant","square","ellipticJ","ai","twon","ellipticF","guyouRaw","K","psi","at","y_1","guyouComplexAtan","sinhPsi","cscPhi","cotPhi2","cotLambda2","ellipticFi","hammerRetroazimuthalRaw","hammerRetroazimuthalRotation","rotate_","circle","geoCircle","ring","sx","sy","gringortenHexadecantInvert","tn","guyouComplexDivide","healpixParallel","healpixLambert","healpixRaw","H","dy1","sphereTop","sphereBottom","sphereNudge","step","geoStream","concat","range","map","hillRaw","L","Bt","rho0","K2","L2","omega","sinTheta","cosTheta","Bt_Bt1","C","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","homolosineRaw","hufnagelRaw","psiMax","M","mapping","inversemapping","isNaN","kr","mutate","adsimp","fa","fm","fb","V0","tol","maxdepth","depth","state","nanEncountered","sl","V1","V2","err","maxDepthCount","integrate","hyperellipticalRaw","gamma","elliptic","G","approx","push","Y","rmin","rmax","pointEqual","interpolateLine","resampled","inverse","bounds","lobe","bound","lambda0","phi1","merge","interpolateSphere","kavrayskiy7Raw","lagrangeRaw","spacing","pi_sqrt2","larriveeRaw","laskowskiRaw","littrowRaw","loximuthalRaw","millerRaw","modifiedStereographicRaw","zr","zi","ar","br","bi","deltar","deltai","sinc","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","lambdaPhi","y2_1","x2_y2_1","alaska","gs48","gs50","lee","modifiedStereographicAlaska","modifiedStereographic","modifiedStereographicGs48","modifiedStereographicGs50","modifiedStereographicMiller","modifiedStereographicLee","coefficients","sqrt6","sqrt7","mtFlatPolarParabolicRaw","mtFlatPolarQuarticRaw","mtFlatPolarSinusoidalRaw","naturalEarth2Raw","phi4","phi6","nellHammerRaw","sinTheta_2","nicolosiRaw","b2","d2","b2d2","d2b2","N","x2y2","pi2","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonC1","pattersonC2","pattersonC3","pattersonC4","pattersonYmax","pattersonRaw","polyconicRaw","multiply","subtract","root","face","node","transform","faceInvert","faceDegrees","children","recurse","parent","edges","faceEdges","shared","found","sharedEdge","forEach","child","hasInverse","proj","outline","edge","multiPoint","notPoles","filter","inside","isArray","some","yc","octahedron","faceProjection","faces","polyhedral","kx","collignonK","w5","xyz","cartesian","hexagon","spherical","cornerNormals","parents","normals","dot","object","Error","projectFeature","projectFeatureCollection","projectGeometry","features","id","properties","geometry","geometries","projectGeometryCollection","sink","sinkPoint","sinkLine","sinkPolygon","result","lines","noop","polygons","holes","area","clockwise","hole","polygon","contains","yi","pj","xj","yj","projectQuincuncial","quincuncial","input","digits","quantizePoint","output","toFixed","quantizePoints","quantizePointsNoDuplicates","point0","quantizePolygon","quantizeGeometry","bbox","quantizeFeature","rectangularPolyconicRaw","E","cotPhi","robinsonRaw","i0","di","ax","ay","bx","by","satelliteRaw","P","vertical","satelliteVerticalRaw","cosOmega","sinOmega","tilt","epsilonInverse","x0e","x1e","y0e","y1e","nonempty","normalizePoint","clampPoint","clamped","clampPoints","extractFragments","rings","fragments","index","pointk","xk","yk","fragmentBefore","pop","stitchFragments","fragment","start","startFragment","end","endFragment","fragmentByStart","fragmentByEnd","stitchFeature","stitchGeometry","timesRaw","twoPointAzimuthalRaw","cosd","twoPointAzimuthalUsa","twoPointAzimuthal","twoPoint","twoPointEquidistantRaw","z0","lambdaa","lambdab","z02","tanLambda0","S","za","zb","cosza","coszb","twoPointEquidistantUsa","twoPointEquidistant","vanDerGrintenRaw","A2","P2","P2_A2","G_P2","Q","vanDerGrinten2Raw","vanDerGrinten3Raw","vanDerGrinten4Raw","B2","C2","BC","B_C2","B_3C","D2","wagnerRaw","poleline","parallels","inflation","vratio","m1","t1","wagnerFormula","wagner","wagner7","x2_y2","c3","a1","theta1","C_","B_C","F_","sqrtF","slug","script","wagner4Raw","wagner6Raw","wiechelRaw","sin1_Phi","winkel3Raw","F","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","d3GeoProjection"],"sourceRoot":""}