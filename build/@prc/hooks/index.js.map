{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@prc/hooks/external window \"React\"","webpack://@prc/hooks/external window [\"wp\",\"element\"]","webpack://@prc/hooks/external window [\"wp\",\"data\"]","webpack://@prc/hooks/external window [\"wp\",\"coreData\"]","webpack://@prc/hooks/external window [\"wp\",\"i18n\"]","webpack://@prc/hooks/./index.js","webpack://@prc/hooks/./use-client-width.js","webpack://@prc/hooks/./use-debounce.js","webpack://@prc/hooks/./use-fetch.js","webpack://@prc/hooks/./use-keypress.js","webpack://@prc/hooks/./use-local-storage.js","webpack://@prc/hooks/./use-window-size.js","webpack://@prc/hooks/./use-taxonomy.js","webpack://@prc/hooks/./use-has-innerblock-selected.js"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"coreData\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","import useClientWidth from './use-client-width';\nimport useDebounce from './use-debounce';\nimport useFetch from './use-fetch';\nimport useKeyPress from './use-keypress';\nimport useHasSelectedInnerBlock from './use-has-innerblock-selected';\nimport useLocalStorage from './use-local-storage';\nimport useTaxonomy from './use-taxonomy';\nimport useWindowSize from './use-window-size';\n\nfunction loadScript(slug, script) {\n\tif (!window.prcHooks[slug]) {\n\t\twindow.prcHooks[slug] = script;\n\t}\n}\n\nwindow.prcHooks = {};\n\nloadScript('useClientWidth', useClientWidth);\nloadScript('useDebounce', useDebounce);\nloadScript('useFetch', useFetch);\nloadScript('useKeyPress', useKeyPress);\nloadScript('useLocalStorage', useLocalStorage);\nloadScript('useWindowSize', useWindowSize);\nloadScript('useTaxonomy', useTaxonomy);\nloadScript('useHasSelectedInnerBlock', useHasSelectedInnerBlock);\n\nconsole.log('Loading @prc/hooks...', window.prcHooks);\n","/**\n * WordPress dependencies\n */\nimport { useState, useEffect } from 'react';\n\n/**\n * A hook to get the client width of an element and update it as the window resizes.\n *\n * @param {element} ref\n * @param {Array}   dependencies\n * @return\n */\nexport default function useClientWidth(ref, dependencies) {\n\tconst [clientWidth, setClientWidth] = useState();\n\n\tfunction calculateClientWidth() {\n\t\tsetClientWidth(ref?.current?.clientWidth);\n\t}\n\n\tuseEffect(calculateClientWidth, [ref, dependencies]);\n\n\tuseEffect(() => {\n\t\tconsole.log('useClientWidth', ref, dependencies);\n\t\tif (ref?.current?.ownerDocument === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tconst { defaultView } = ref?.current?.ownerDocument;\n\n\t\tdefaultView.addEventListener('resize', calculateClientWidth);\n\n\t\treturn () => {\n\t\t\tdefaultView.removeEventListener('resize', calculateClientWidth);\n\t\t};\n\t}, [ref]);\n\n\treturn clientWidth;\n}\n","/**\n * WordPress Dependencies\n */\nimport { useState, useEffect } from '@wordpress/element';\n\n/**\n * Watches an inputValue and returns a debounced version of it after set delay.\n * Usage: const debouncedValue = useDebounce('a string being typed by a user...', 500);\n * @param {*} inputValue\n * @param {*} delay\n * @returns value after delay\n */\nconst useDebounce = (value, delay) => {\n\t// State and setters for debounced value\n\tconst [debouncedValue, setDebouncedValue] = useState(value);\n\tuseEffect(\n\t\t() => {\n\t\t\t// Update debounced value after delay\n\t\t\tconst handler = setTimeout(() => {\n\t\t\t\tsetDebouncedValue(value);\n\t\t\t}, delay);\n\t\t\t// Cancel the timeout if value changes (also on delay change or unmount)\n\t\t\t// This is how we prevent debounced value from updating if value is changed ...\n\t\t\t// .. within the delay period. Timeout gets cleared and restarted.\n\t\t\treturn () => {\n\t\t\t\tclearTimeout(handler);\n\t\t\t};\n\t\t},\n\t\t[value, delay], // Only re-call effect if value or delay changes\n\t);\n\treturn debouncedValue;\n};\n\nexport default useDebounce;\n","import { useEffect, useRef, useReducer } from '@wordpress/element';\n\n/**\n * A react hook to fetch data from a url and store status, errors, and date in state.\n * Usage: const { status, data, error } = useFetch(url);\n * Adapted from https://www.smashingmagazine.com/2020/07/custom-react-hook-fetch-cache-data/\n * Example application: https://codesandbox.io/s/usefetch-demo-clt9o\n * @param {*} url\n * @returns {object} status, data, and error\n */\nconst useFetch = (url) => {\n\tconst cache = useRef({});\n\n\t// initial state, no preloaded data\n\tconst initialState = {\n\t\tstatus: 'idle',\n\t\terror: null,\n\t\tdata: [],\n\t};\n\n\t// reducer function to update state depending on current status of fetch\n\tconst reducer = (state, action) => {\n\t\tswitch (action.type) {\n\t\t\tcase 'FETCHING':\n\t\t\t\treturn { ...initialState, status: 'fetching' };\n\t\t\tcase 'FETCHED':\n\t\t\t\treturn {\n\t\t\t\t\t...initialState,\n\t\t\t\t\tstatus: 'fetched',\n\t\t\t\t\tdata: action.payload,\n\t\t\t\t};\n\t\t\tcase 'FETCH_ERROR':\n\t\t\t\treturn {\n\t\t\t\t\t...initialState,\n\t\t\t\t\tstatus: 'error',\n\t\t\t\t\terror: action.payload,\n\t\t\t\t};\n\t\t\tdefault:\n\t\t\t\treturn state;\n\t\t}\n\t};\n\t// useReducer instead of useState to set multiple values simultaneously and prevent unnecessary rerenders.\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\tuseEffect(() => {\n\t\tlet cancelRequest = false;\n\t\tif (!url) return undefined;\n\n\t\tconst fetchData = async () => {\n\t\t\tdispatch({ type: 'FETCHING' });\n\t\t\tif (cache.current[url]) {\n\t\t\t\tconst data = cache.current[url];\n\t\t\t\tdispatch({ type: 'FETCHED', payload: data });\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(url);\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tcache.current[url] = data;\n\t\t\t\t\tif (!cancelRequest) {\n\t\t\t\t\t\tdispatch({ type: 'FETCHED', payload: data });\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (!cancelRequest) {\n\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\ttype: 'FETCH_ERROR',\n\t\t\t\t\t\t\tpayload: error.message,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfetchData();\n\n\t\t// cleanup switch to prevent data leak on unmount\n\t\treturn function cleanup() {\n\t\t\tcancelRequest = true;\n\t\t};\n\t}, [url]);\n\n\treturn state;\n};\n\nexport default useFetch;\n","import { useEffect, useState } from '@wordpress/element';\n\nconst useKeyPress = (targetKey) => {\n\t// State for keeping track of whether key is pressed\n\tconst [keyPressed, setKeyPressed] = useState(false);\n\t// If pressed key is our target key then set to true\n\tfunction downHandler({ key }) {\n\t\tif (key === targetKey) {\n\t\t\tsetKeyPressed(true);\n\t\t}\n\t}\n\t// If released key is our target key then set to false\n\tconst upHandler = ({ key }) => {\n\t\tif (key === targetKey) {\n\t\t\tsetKeyPressed(false);\n\t\t}\n\t};\n\t// Add event listeners\n\tuseEffect(() => {\n\t\twindow.addEventListener('keydown', downHandler);\n\t\twindow.addEventListener('keyup', upHandler);\n\t\t// Remove event listeners on cleanup\n\t\treturn () => {\n\t\t\twindow.removeEventListener('keydown', downHandler);\n\t\t\twindow.removeEventListener('keyup', upHandler);\n\t\t};\n\t}, []); // Empty array ensures that effect is only run on mount and unmount\n\treturn keyPressed;\n}\n\nexport default useKeyPress;\n","import { useState } from '@wordpress/element';\n\n/**\n * A react hook to get data from local storage as react state and store data in both.\n * Usage: const [name, setName] = useLocalStorage(\"name\", \"Bob\");\n *\n * @param {*} key\n * @param {*} initialValue\n * @returns [storedValue, setValue]\n */\nconst useLocalStorage = (key, initialValue) => {\n\t// State to store our value\n\t// Pass initial state function to useState so logic is only executed once\n\tconst [storedValue, setStoredValue] = useState(() => {\n\t\ttry {\n\t\t\t// Get from local storage by key\n\t\t\tconst item = window.localStorage.getItem(key);\n\t\t\t// Parse stored json or if none return initialValue\n\t\t\treturn item ? JSON.parse(item) : initialValue;\n\t\t} catch (error) {\n\t\t\t// If error also return initialValue\n\t\t\tconsole.log(error);\n\t\t\treturn initialValue;\n\t\t}\n\t});\n\n\t// Return a wrapped version of useState's setter function that ...\n\t// ... persists the new value to localStorage.\n\tconst setValue = (value) => {\n\t\ttry {\n\t\t\t// Allow value to be a function so we have same API as useState\n\t\t\tconst valueToStore =\n\t\t\t\tvalue instanceof Function ? value(storedValue) : value;\n\t\t\t// Save state\n\t\t\tsetStoredValue(valueToStore);\n\t\t\t// Save to local storage\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\n\t\t} catch (error) {\n\t\t\t// A more advanced implementation would handle the error case\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\treturn [storedValue, setValue];\n};\n\nexport default useLocalStorage;\n","import { useEffect, useState } from '@wordpress/element';\n\n/**\n * Watches for window size changes and returns the current window size.\n * Usage: const { width, height } = useWindowSize();\n * Adapted from https://usehooks.com/useWindowSize/.\n * @returns {object} width and height of window\n */\nconst useWindowSize = () => {\n\tconst [windowSize, setWindowSize] = useState({\n\t\twidth: undefined,\n\t\theight: undefined,\n\t});\n\n\tuseEffect(() => {\n\t\t// Handler to call on window resize\n\t\tfunction handleResize() {\n\t\t\t// Set window width/height to state\n\t\t\tsetWindowSize({\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight,\n\t\t\t});\n\t\t}\n\n\t\t// Add event listener\n\t\twindow.addEventListener('resize', handleResize);\n\n\t\t// Call handler right away so state gets updated with initial window size\n\t\thandleResize();\n\n\t\t// Remove event listener on cleanup\n\t\treturn () => window.removeEventListener('resize', handleResize);\n\t}, []); // Empty array ensures that effect is only run on mount\n\n\treturn windowSize;\n}\n\nexport default useWindowSize;\n","/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { useSelect } from '@wordpress/data';\nimport { store as coreStore } from '@wordpress/core-data';\n\nexport default function useTaxonomy(taxonomy = null, slug =  null, fields = [ 'id', 'name' ]) {\n\tconst { taxId, taxName } = useSelect( select => {\n\t\tconst { getEntityRecords } = select( coreStore );\n\n\t\tconst tax = null !== slug ? getEntityRecords( 'taxonomy', taxonomy, {\n\t\t\tcontext: 'view',\n\t\t\tper_page: 1,\n\t\t\t_fields: fields,\n\t\t\tslug: slug,\n\t\t} ) : null;\n\n\t\treturn {\n\t\t\ttaxId: tax?.[ 0 ]?.id,\n\t\t\ttaxName: tax?.[ 0 ]?.name,\n\t\t}\n\t});\n\n\treturn [\n\t\ttaxId,\n\t\ttaxName,\n\t];\n}\n","/**\n * WordPress Dependencies\n */\nimport { useSelect } from '@wordpress/data';\n\n/**\n * useHasSelectedInnerBlock\n * Determine whether one of the inner blocks currently is selected\n *\n * @param {Object} props\n * @param props.clientId\n * @return {boolean} wether the block is the ancestor of selected blocks\n */\nexport default function useHasSelectedInnerBlock(clientId) {\n\t// eslint-disable-next-line prettier/prettier\n\treturn useSelect(\n\t\t(select) => {\n\t\t\tconst hasChildrenSelected = select(\n\t\t\t\t'core/block-editor',\n\t\t\t).hasSelectedInnerBlock(clientId, true);\n\t\t\tconst hasParentSelected =\n\t\t\t\tselect('core/block-editor').getSelectedBlockClientId() === clientId;\n\t\t\treturn hasChildrenSelected || hasParentSelected;\n\t\t},\n\t\t[clientId],\n\t);\n}\n"],"names":["window","loadScript","slug","script","prcHooks","ref","dependencies","clientWidth","setClientWidth","useState","calculateClientWidth","current","useEffect","console","log","undefined","ownerDocument","defaultView","addEventListener","removeEventListener","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","url","cache","useRef","initialState","status","error","data","state","dispatch","useReducer","reducer","action","type","payload","cancelRequest","async","response","fetch","json","message","fetchData","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","useLocalStorage","initialValue","storedValue","setStoredValue","item","localStorage","getItem","JSON","parse","valueToStore","Function","setItem","stringify","useWindowSize","windowSize","setWindowSize","width","height","handleResize","innerWidth","innerHeight","taxonomy","fields","taxId","taxName","useSelect","select","getEntityRecords","coreStore","tax","context","per_page","_fields","id","name","clientId","hasChildrenSelected","hasSelectedInnerBlock","hasParentSelected","getSelectedBlockClientId"],"sourceRoot":""}